apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../config/jacoco.gradle'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.sun.training.ut"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {

        }

        release {
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
            minifyEnabled false
        }

        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        def URL_END_POINT = "URL_END_POINT";
        develop {
            versionNameSuffix = "-dev"
            applicationIdSuffix = ".dev"
            buildConfigField "String", URL_END_POINT, '"https://jsonplaceholder.typicode.com/"'
        }
        staging {
            versionNameSuffix = "-staging"
            applicationIdSuffix = ".staging"
            buildConfigField "String", URL_END_POINT, '""'
        }
        product {
            buildConfigField "String", URL_END_POINT, '""'
        }
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    dynamicFeatures = [':exercise_ten']
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$ext_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"

    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"

    // Koin for Android
    implementation "org.koin:koin-android:$koin_version"
    // or Koin for Lifecycle scoping
    implementation "org.koin:koin-android-scope:$koin_version"
    // or Koin for Android Architecture ViewModel
    implementation "org.koin:koin-android-viewmodel:$koin_version"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$converter_gson_version"

    //Logging
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"

    //Gson
    implementation "com.google.code.gson:gson:$gson_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_versions"

    testImplementation 'org.mockito:mockito-core:3.3.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation "org.powermock:powermock-module-junit4:2.0.4"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.4"

    testImplementation("io.mockk:mockk:1.9.3")
    androidTestImplementation("io.mockk:mockk-android:1.9")

    implementation 'com.google.android.play:core:1.8.0'

    // For Kotlin users also import the Kotlin extensions library for Play Core:
    implementation 'com.google.android.play:core-ktx:1.8.1'
}
