apply plugin:  'jacoco'

jacoco {
    toolVersion = "0.8.6"
}

project.afterEvaluate {

    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            // Line 2 & 3
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true // Line 5
                xml.enabled = true
            }
            def excludes = [ // Line 10
                             'jdk.internal.*',
                             '**/*App.*',
                             '**/*Application*',
                             '**/*Activity*',
                             '**/DataBinderMapper*',
                             '**/DataBindingInfo.*',
                             '**/AppBinding.*',
                             '**/UtilsKt.*',
                             '**/*Fragment.*',
                             '**/*JsonAdapter.*', // adapters generated by Moshi
                             '**/di/**',
                             '**/*Dagger.*',
                             '**/exercise_eight/GridSpaceItemDecoration.*',
                             '**/exercise_eight/*Adapter*.*',
                             '**/ExerciseEightViewModel.member*',
                             '**/R.class',
                             '**/R$*.class',
                             '**/BuildConfig.*',
                             '**/Manifest*.*',
                             '**/*Test*.*',
                             'android/**/*.*',
                             '**/*Impl.*',
                             '**/BR.*',
                             '**/prefs/*.*',
                             '**/base/*.*',
                             '**/model/*.*',
                             '**/remote/*.*',
                             '**/callback/*.*',
                             '**/data/*.*',
                             '**/repository/**/*.*',
                             '**/home/*.*',
                             '**/databinding/*.*',
                             '**/SingleLiveData*',
                             '**/business/*.*'
            ]

            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories.from = files([javaClasses, kotlinClasses])  // Line 18

            sourceDirectories.from = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")

            executionData.setFrom(fileTree(
                    dir: "$buildDir",
                    include: [
                            "jacoco/${testTaskName}.exec",
                            'outputs/code-coverage/connected/flavors/**/*coverage.ec'
                    ]
            ))

            doFirst {
                files("$buildDir/tmp/kotlin-classes/${variantName}").getFiles().each { file ->
                    if (file.name.contains('$$')) {
                        file.renameTo(file.path.replace('$$', '$'))
                    }
                }
            }
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}